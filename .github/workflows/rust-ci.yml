name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event_name != 'release'

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Check formatting
      run: cargo fmt -- --check

  publish:
    if: github.event_name == 'release' && github.event.action == 'created'
    strategy:
      fail-fast: false  # Continue with other platforms if one fails
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: linux
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: win
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Create bin directory
        run: mkdir -p bin
      
      - name: Build Release Binary
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}
      
      - name: Prepare Binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/rappy bin/rappy-${{ matrix.name }}
          chmod +x bin/rappy-${{ matrix.name }}
      
      - name: Prepare Binary (Windows)
        if: runner.os == 'Windows'
        run: |
          copy target\${{ matrix.target }}\release\rappy.exe bin\rappy-${{ matrix.name }}.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.name }}
          path: bin/rappy-${{ matrix.name }}*
          if-no-files-found: error

      - name: Upload to GitHub Release
        if: matrix.os == 'ubuntu-22.04'
        uses: softprops/action-gh-release@v1
        with:
          files: bin/rappy-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  npm-publish:
    needs: publish
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: bin

      - name: Debug artifacts
        run: |
          echo "Content of bin directory:"
          ls -la bin/
          find bin -type f

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Move binaries and prepare files
        run: |
          # Ensure bin directory exists
          mkdir -p bin

          # Move binaries from artifact directories to bin
          find bin -type f -name "rappy-*" -exec mv {} bin/ \;

          # Create the wrapper script
          cat > bin/rappy.js << 'EOF'
          #!/usr/bin/env node

          const { spawn } = require('child_process');
          const path = require('path');
          const os = require('os');

          // Determine platform and architecture
          const platform = os.platform();
          const arch = os.arch();

          // Map to binary name
          let binaryName = 'rappy-linux';
          if (platform === 'darwin') {
            binaryName = arch === 'arm64' ? 'rappy-macos-arm64' : 'rappy-macos';
          } else if (platform === 'win32') {
            binaryName = 'rappy-win.exe';
          }

          const binaryPath = path.join(__dirname, binaryName);

          // Execute the binary
          const child = spawn(binaryPath, process.argv.slice(2), { stdio: 'inherit' });

          child.on('error', (err) => {
            console.error('Failed to start binary:', err);
            process.exit(1);
          });

          child.on('exit', (code) => {
            process.exit(code);
          });
          EOF

          chmod +x bin/rappy.js

          # Debug final bin contents
          echo "Final bin directory contents:"
          ls -la bin/

      - name: Update package.json
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          if [ ! -f package.json ]; then
            cat > package.json << EOF
            {
              "name": "@devrapture/rappy",
              "version": "$VERSION",
              "description": "A lightning-fast CLI tool for scaffolding Web3 projects",
              "bin": {
                "rappy": "bin/rappy.js"
              },
              "files": [
                "bin",
                "README.md",
                "LICENSE"
              ],
              "os": ["linux", "darwin", "win32"],
              "cpu": ["x64", "arm64"],
              "engines": {
                "node": ">=14"
              }
            }
            EOF
          else
            npm version $VERSION --no-git-tag-version --allow-same-version
          fi

      - name: Publish to npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}m