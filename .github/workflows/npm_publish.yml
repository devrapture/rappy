name: NPM Publish

on: 
  workflow_run:
    workflows: ["Release"]
    types:
      - completed

permissions:
  contents: write
  packages: write

jobs:
  npm-publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for release assets
        run: |
          # Create bin directory
          mkdir -p bin
          
          MAX_RETRIES=10
          RETRY_COUNT=0
          SLEEP_TIME=30
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Get latest release info
            RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            
            # Get assets URL and count
            assets_url=$(echo "$RELEASE_INFO" | jq -r '.assets_url')
            assets_count=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$assets_url" | jq '. | length')
            
            echo "Found $assets_count assets"
            
            # Check if we have all expected assets (4 binaries)
            if [ "$assets_count" -ge 4 ]; then
              echo "All assets are available. Proceeding with download..."
              break
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Assets not ready yet. Attempt $RETRY_COUNT of $MAX_RETRIES. Waiting ${SLEEP_TIME}s..."
            sleep $SLEEP_TIME
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Error: Timed out waiting for release assets"
            exit 1
          fi
          
          # Download the assets
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$assets_url" \
            | jq -r '.[].browser_download_url' \
            | while read url; do
              echo "Downloading: $url"
              wget -P bin/ "$url"
            done
          
          # List downloaded files
          ls -la bin/
          
          # Make binaries executable
          chmod +x bin/*

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Create wrapper script
        run: |
          cat > bin/rappy.js << 'EOF'
          #!/usr/bin/env node

          const { spawn } = require('child_process');
          const path = require('path');
          const os = require('os');
          const fs = require('fs');

          // Determine platform and architecture
          const platform = os.platform();
          const arch = os.arch();

          // Map to binary name
          let binaryName;
          if (platform === 'win32') {
            binaryName = 'rappy-windows.exe';
          } else if (platform === 'darwin') {
            binaryName = arch === 'arm64' ? 'rappy-macos-arm64' : 'rappy-macos';
          } else {
            binaryName = 'rappy-linux';
          }

          const binaryPath = path.join(__dirname, binaryName);

          if (!fs.existsSync(binaryPath)) {
            console.error(`Binary not found: ${binaryPath}`);
            console.error('Platform:', platform, 'Architecture:', arch);
            process.exit(1);
          }

          // Execute the binary with 'create' command by default
          const args = ['create', ...process.argv.slice(2)];

          const child = spawn(binaryPath, args, {
            stdio: 'inherit'
          });

          child.on('error', (err) => {
            console.error('Failed to start binary:', err);
            process.exit(1);
          });

          child.on('exit', (code) => {
            process.exit(code || 0);
          });
          EOF

          chmod +x bin/rappy.js

      - name: Create package.json
        run: |
          # Get version from the latest release
          VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" \
            | jq -r '.tag_name' | sed 's/^v//')
          
          echo "Publishing version: $VERSION"
          
          cat > package.json << EOF
          {
            "name": "create-rappy-app",
            "version": "$VERSION",
            "description": "A lightning-fast CLI tool for scaffolding Web3 projects",
            "bin": {
              "create-rappy-app": "bin/rappy.js"
            },
            "files": [
              "bin/rappy.js",
              "bin/rappy-linux",
              "bin/rappy-macos",
              "bin/rappy-macos-arm64",
              "bin/rappy-windows.exe",
              "README.md",
              "LICENSE"
            ],
            "os": ["linux", "darwin", "win32"],
            "cpu": ["x64", "arm64"],
            "engines": {
              "node": ">=14"
            },
            "repository": {
              "type": "git",
              "url": "git+https://github.com/${{ github.repository }}.git"
            },
            "keywords": [
              "create-rappy-app",
              "web3",
              "cli",
              "scaffold",
              "ethereum",
              "nextjs",
              "foundry",
              "hardhat"
            ],
            "author": "devrapture",
            "license": "MIT",
            "bugs": {
              "url": "https://github.com/${{ github.repository }}/issues"
            },
            "homepage": "https://github.com/${{ github.repository }}#readme"
          }
          EOF

      - name: List files before publish
        run: |
          echo "Content of bin directory:"
          ls -la bin/
          echo "Content of root directory:"
          ls -la

      - name: Publish to NPM
        run: |
          echo "Registry URL: $(npm config get registry)"
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}